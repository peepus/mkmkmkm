{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(png)\nlibrary(grid)\nlibrary(readxl)\n\nsource(\"helpers.R\")\n\n\na <- readRDS(\"data/a.RDS\")\n\nb <- readRDS(\"data/Strefy1.RDS\")\n\nboisko <- readPNG(\"data/boisko3.png\")\nboisko <- rasterGrob(boisko, width=unit(1.0,\"npc\"), height=unit(1.0,\"npc\"))\n\nboisko2 <- readPNG(\"data/boisko2.png\")\nboisko2 <- rasterGrob(boisko2, width=unit(1.0,\"npc\"), height=unit(1.0,\"npc\"))\n\nshinyServer(function(input, output) {\n  \n  data <- reactive({\n  l <- subset(b, b$zawodnik == input$zawodnik)\n  l$zawodnik <- NULL\n  n <- l\n  n$Średnia <- c(\"60%\", \"35%\", \"33%\", \"36%\", \"36%\")\n  n$FGM <- as.character(n$FGM)\n  n$FGA <- as.character(n$FGA)\n  n[,4] <- as.character(n[,4])\n  n <- n\n  })\n  \n  pps <- reactive({\n    l <- subset(b, b$zawodnik == input$zawodnik)\n    zaw <- l$zawodnik\n    l$zawodnik <- NULL\n    n <- l\n    n$Średnia <- c(\"60%\", \"35%\", \"33%\", \"36%\", \"36%\")\n    n[,4] <- as.character(n[,4])\n    n <- n\n    zawPPS <- (((n[1,2]+n[2,2])*2) + ((n[3,2]+n[4,2]+n[5,2])*3))/ sum(n$FGA)\n    p12 <- subset(b, b$Strefa == \"Spod Kosza\")\n    p22 <- subset(b, b$Strefa == \"Midrange\")\n    \n    p13 <- subset(b, b$Strefa == \"3pt Srodek\") \n         p23 <- subset(b, b$Strefa == \"3pt Lewy Naroznik\")\n          p33 <- subset(b, b$Strefa == \"3pt Prawy Naroznik\")\n          \n    p2 <- rbind(p12, p22)\n    \n    p3 <- rbind(p13, p23, p33)\n    \n    \n          \n    p2 <- p2$FGM*2\n    p3 <- p3$FGM*3\n    pts <- sum(p2,p3)\n    fga <- sum(b$FGA)\n    \n    meanPPS <- pts/fga\n    \n    ptsps <- data.frame(zawPPS, meanPPS)\n    colnames(ptsps) <- c(\"Punkty na rzut Zawodnika\", \"Średnia Ligi\")\n    return(ptsps)\n })\n  \n  \n  output$table <- renderTable({\n    data()\n  })\n  \n  \n\n  output$plot <- reactivePlot(function() {\n    \nh <- subset(a, a$zawodnik == input$zawodnik)\n\nzaw <- h$zawodnik[1]\nzaw <- as.character(zaw)\n\nteam <- h$druzyna[1]\nteam <- as.character(team)\n\nif(input$chart == \"HeatMapa\") {\n\np <- ggplot(h, aes(x=x,y=y)) +\n  stat_density2d(geom=\"raster\", aes(fill = ..density..), contour = FALSE, na.rm = FALSE, n = 250) +\n  scale_fill_gradientn(colors = col, guide = FALSE )+\n  annotation_custom(boisko, -60, 1570, -10, 1150)  +\n  guides(alpha = FALSE, size = FALSE, fill = FALSE) +\n  annotate(\"text\", x = 770, y = 1020, label = team , size = 8, family=\"sans\", fontface=\"bold\", color = \"white\") +\n  annotate(\"text\", x = 770, y = 1100, label = zaw , size = 8.5, family=\"sans\", fontface=\"bold\", color = \"white\") +\n  xlim(-60, 1570) +\n  ylim(-10, 1150) +\n  theme(line = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        panel.background = element_blank(),\n        axis.text.y = element_blank(),\n        legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_blank(),\n        panel.border = element_blank(),\n        panel.margin = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_blank())\nprint(p)\n\n  }else if(input$chart == \"Standardowy\") {\n    p <- ggplot(h, aes(x=x,y=y)) +\n      annotation_custom(boisko2, -60, 1570, -10, 1150) +\n      geom_point(aes(colour = trafienie), size = 4, alpha = 0.7, stroke = 2) +\n      scale_color_manual(values = c(\"#00C853\", \"#f44336\")) +\n      guides(alpha = FALSE, size = FALSE, fill = FALSE) +\n      annotate(\"text\", x = 770, y = 1020, label = team , size = 8, family=\"sans\", fontface=\"bold\", color = \"#263238\") +\n      annotate(\"text\", x = 770, y = 1100, label = zaw , size = 10, family=\"sans\", fontface=\"bold\", color = \"#263238\") +\n      xlim(-60, 1570) +\n      ylim(-10, 1150) +\n      theme(line = element_blank(),\n            axis.title.x = element_blank(),\n            axis.title.y = element_blank(),\n            axis.text.x = element_blank(),\n            axis.text.y = element_blank(),\n            legend.position = \"none\",\n            legend.title = element_blank(),\n            plot.title = element_blank())\n    print(p)\n  \n}\n  })\n  \n  output$eff <- renderTable({\n    pps()\n  })\n\n\n})\n  \n\n\n\n  \n\n\n\n\n",
    "created" : 1479076780111.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1102915411",
    "id" : "86DFF6D4",
    "lastKnownWriteTime" : 1479413400,
    "last_content_update" : 1479413400956,
    "path" : "C:/Users/Dr/Desktop/shiny/plkR/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}